
services:

    # ATTENTION: here we use a replica set with docker SWARM (so dont use docker compose for starting it!)
    # to make both available you must use `docker stack deploy -c docker-compose.yaml myswarm`
    
    fastapi_swarm:
        build: # This is ignored by SWARM but needed to build the images using the dockerfile in the same dir
            context: .
            dockerfile: Dockerfile 
        image: fastapi_swarm:latest  # tells Docker Compose what to name (tag) the image after it’s built.
        hostname: "swarm.{{.Task.Slot}}"  # this replaces the containerID with a meaningfull name
        deploy:
          mode: global
          placement:
            constraints:
              - node.labels.target == true
          restart_policy:
            condition: on-failure
          endpoint_mode: dnsrr  # This tells Docker Swarm to use DNS Round Robin, which will return each container's IP address as separate entries. Then NGINX will have multiple endpoints to distribute requests across.


    nginx:  # service isn’t using Swarm-specific deploy settings (like placement constraints or global mode), so it will run as usual on the main
        image: nginx:latest
        ports:
        - "80:80"
        - "443:443"
        volumes:
        # Mount the nginx config file
        - ./nginx.conf:/etc/nginx/nginx.conf:ro
        # Mount the certificates directory for SSL
        - ./certs:/etc/nginx/certs:ro
        # Mount the password file for basic authentification
        - ./.htpasswd:/etc/nginx/.htpasswd:ro
        restart: unless-stopped

networks:
    default:
        driver: overlay # for all swarm "overlay" network is recommended (mandatory if multiple node setup)
        attachable: true   # <-- important! Docker allows containers (and the Compose process) to attach to the overlay network, preventing the PermissionDenied error. 
