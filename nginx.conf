worker_processes 1;   # sets the number of processes nginx starts at the beginning, auto is also possible (normally set asa much as cpu cores)

events {  # The events CONTEXT is for general connection processing settings
	worker_connections 1024;  # this DIRECTIVE defines how many connections are allowed per worker
}

http {   # all about http traffic  (=MAIN CONFIG BLOCK)
	include mime.types;   # this let nginx adds a header to the respond to the client with the type of files (what the browser should expect) 
    resolver 127.0.0.11 valid=60s; # Specifies the DNS server (Dockerâ€™s internal DNS is usually at 127.0.0.11) for re-resolving domain names

	upstream fastapi_server_group {   # this defines a group of backend servers where trafic from the client should be routed to (e.g. for load balancing)
		zone fastapi_server_group 64k;  # allocate shared memory for DNS resolution (nneded if you use re-resolving)

		# here i have settet up the docker swarm with integrated load balancing to all instances on all nodes (because: mode=global)
		server fastapi_swarm:3003 max_fails=3 fail_timeout=30s resolve; 
		# max_fails and fail_timeout marks a server as temporarily unavailable rather than failing immediately
		# resolve: Forces Nginx to re-resolve the hostname periodically. Needs to be set if the hostname is a variable (e.g. docker swarm)
		
		# adress where the backup fastapi container is listening to
		server fastapi_backup:3003 backup; # If one server is critical and should only be used if the primary swarm is down
		}
		# UPSTREAM means from the client to higher level infrastructure
		# DOWNSTREAM means traffic back to the client

	server {  # a server block defines how to handle a request to a particular domain or ip adress
		listen 443 ssl;   # nginx will now listen only on the HTTPS port 443 (encrypted with SSL)
		server_name manus-swarm.com www.manus-swarm.com;   
		
		ssl_certificate  /etc/nginx/certs/nginx-selfsigned.crt;     # certificate file
		ssl_certificate_key /etc/nginx/certs/nginx-selfsigned.key;  # private key file

		location / {   # the URL "/" on which this block should listen/apply (here the root URL will apply to all request unless more specific locations are defined below)
			# The following block make nginx to a reverse proxy
			proxy_pass http://fastapi_server_group;  # forwards the request matching to this block to the "upstream GROUP" 
			# we need to forward more infos from the client request to the backend servers: (like URL/route, cookies, authentication_header etc.)
			# The request the backend will see comes from nginx ip and only what we forward here comes from the client to the backend. Nginx works as a shield/filter. 
			proxy_set_header Host $host;   # forwards the URL to the backend so that you call the right endpoint
			proxy_set_header X-Real-IP $remote_addr;   # forwards the client ip adress that make the request (e.g. for logging, analytics, security) 
			# to try the next available server if certain errors occur (this is needed if the swarm is down to switch to the backup)
			proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504; # This directive tells Nginx to forward the request to another upstream server if, for instance, it gets a timeout or a 502 error.

			# Enable basic authentication (user+pw)
            auth_basic "Restricted Access";
            auth_basic_user_file /etc/nginx/.htpasswd;

		}
	}
	server {  # this forwards http requests to the secure endpoint (if a user try http:// it automatically calls the https://website)
		listen 80;
		server_name manus-swarm.com www.manus-swarm.com;

		location / {  # permanently redirect the client (browser) to the HTTPS server
			return 301 https://$host$request_uri;   # responds with a redirection HTTP response code
		}
	}
}
